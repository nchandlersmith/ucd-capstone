service: backend
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-offline # should be last in list

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    ACCOUNTS_TABLE_NAME: Accounts-${self:provider.stage}
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**/*

custom:
  # Create local instance of dynamodb
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      seed: true
      convertEmptyValues: true

functions:
  CreateAccount:
    handler: src/createAccount.handler
    events:
      - http:
          method: post
          path: accounts
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt AccountTable.Arn
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

resources:
 Resources:
  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:provider.environment.ACCOUNTS_TABLE_NAME}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: accountId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: accountId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
